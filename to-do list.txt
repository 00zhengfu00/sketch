待办：
>* （完成）支持读取本地APK文件的图标（已安装APP的图标也可以通过其本地APK文件的方式读取其图标）
>* （完成）示例APP增加一个页面，展示读取已安装APP或本地APK文件的图标的功能。页面分两部分，分别显示已安装APP列表和扫描到的本地APK包列表
>* （完成）修复首页竖的默认图貌似裁剪跑偏的问题
>* （完成）去掉RequestFuture，fire()方法直接返回Request，这样就少创建一个对象了
>* （完成）新增加载级别，并将加载级别参数应用到每个请求中，MEMORY表示只从内存加载；LOCAL：表示只从没存和本地加载；NETWORK：表示最终还会从网络加载，
    这样就能实现移动网络下不从网络加载图片的功能，另外看这样能否替代暂停功能的实现
>* （完成）增加在移动网络下不加载网络图片的功能
>* （完成）SpearImageView支持在移动网络下不加载图片的时候支持手动点击加载功能（是否要新增加一个可以提示“点击加载”的默认图片，同loadingDrawable是同级的）
>* （完成）改善框架实现，便于使用者自定义整个流程中的每个环节
>* （搞定）去掉各种toStatus方法，去掉DEFAULT_ENABLE_DISK_CACHE
>* （搞定）检查下拆分后的各方法
>* （搞定）组织下拆分后的字段和方法
>* （搞定）SpearImageView支持点击加载已经搞的差不多了，还差在displayrequest和displayoptions中增加一个clickloaddrawable并在适当的时候显示这张图片
>* （搞定）将MobileNetworkPauseDownloadManager纳入Spear
>* （搞定）将所有PauseDownloadNewImage改为PauseDownload PauseLoadNewImage也一样
>* （搞定）回收利用request
>* （不靠谱）改AsyncDrawable为RecycleDrawable形式
>* （搞定）立马着手搞定重复利用request的功能，因为失败重试以及暂停下载和onAttachedToWindow()里的恢复图片都要用
>* （搞定）获取缓存文件的时候要考虑其它的目录，这样就可以解决一些问题，比如在未插入SD卡之前缓存文件是放在系统空间里的，插入sd卡之后缓存目录就变成了sd卡，那么查找缓存文件的时候也要到系统缓存去看看
>* （搞定）getCacheFile()如果没有的话就直接返回null
>* （搞定）display请求在加载之前要先从内存缓存中查找一下

>* 支持外部添加一个Bitmap到内存缓存中，这样将会大大增加灵活性（那么外部将有权利设置缓存ID以及决定是否用RecycleDrawable就要放在MemoryCache中了）
>* 考虑将默认图也放到内存缓存中，试图通过这样的方式解决之前担心的默认图太多导致始终占用内存的问题
>* 考虑如何支持用已缓存的小缩略图作为默认图片（比如支持从内存缓存中加载默认图）
>* 修改所有日志总字符串的写法，写一个公共的专门连接字符串的方法
>* 修改包名为me.xiaopan.spear，其它项目也要照办
>* 在Spear中加一个参数，意思就是是否开启暂停加载的功能，然后所有的PauseLoadFor类都判断次参数（不这么搞了）
>* 取消Request之间的继承关系（搞定）
>* 示例APP增加暂停下载时点击重新加载图片和失败时点击重新加载图片选项

待解决BUG：
>* （已解决）当选择不使用内存缓存的时候，在RecyclerView中往回滚的时候必定崩溃，这是因为在onDetachedFromWindow的时候把drawable回收了，然后回收利用ImageView的会先调用onDraw方法绘制，这时候就崩溃了
>* 现在不管在哪个页面往回滚的时候也会概率性的出现图片被回到导致的崩溃，怀疑是新加的几处回收导致的
    （已解决，原因是在显示的时候发现请求已取消了就直接会回收了Bitmap，当这个Bitmap在内存中缓存着再次利用的时候就会由于已回收导致崩溃）
>* PackageManager在解析APK图标的时候，碰到无法解析的就会给一个默认的图标，如果多个请求都返回的是同一张图标，那么其中一个请求在请求的过程中触发了取消事件就会主动回收这张共有的片，那么其它请求拿到的或已经拿到的图片就会是已经回收的，就会导致崩溃，或解码失败
    （已解决，解析到图片后调用packageManager.getDefaultActivityIcon()得到默认图标比较一下，一样的话说明是默认图标，按错误处理即可）
>* （已解决）在2.3上依然会崩溃，现在试图高版本也用RecycleBitmapDrawable来复现并解决问题
>* （已解决）在2.3及以下PackageManager解码APK的图标貌似是有缓存的，比如多个一样的安装包解析得到的是一样的，然后给回收了就崩溃了，这个必须得解决，还得在高版本上实验一下是否有同样的问题

考虑的一些问题：
>* （没有必要，因为是BitmapDrawable的话返回的就是其自己，所以没有必要重新绘制）调用drawableToBitmap后drawable是否有必要发现是bitmapdrawable立即释放）
>* （不必，验证HashCode后发现每次都是不一样的）如果从本地apk文件中读取的icon是否缓存（例如多次读取到的是同一张图片），那么就有必要重新绘制一张，然后回收旧的，
    因为我要保证每一张都是独立的不一样的
>* 当bitmap创建之后遇到的各种取消，并且没有放到内存缓存之前应该主动释放Bitmap（在解码完后发现取消了就回收Bitmap）
>* 考虑是否把Bitmap往缓存里放的时机放到主线程来搞
>* 考虑是否要去除对loadingdrawable的处理

待办池：
写一个系列博客介绍Spear，也算是做一个知识总结
进度显示效果作为一个接口来实现 这样显示样式就可以自定义了
loading支持bitmap
加上支持断点续传，采用后缀名的话也很好做了  哈哈哈 good
解码缓存文件失败的时候要再次下载
考虑支持外部添加一个bitmap到内存缓存中，那么决定是否用recycledrawable就要放在memorycache中了
可以根据图片ID来作为默认图片，这样貌似就能实现默认图是缩略图的功能了
考虑如何处理下载的垃圾文件，申请空间的时候清理文件要处理那些下载垃圾
之前增加的暂停模式是为了滑动时不加载提高滑动流畅度，现在要加一个停止加载新图片的功能，是为了在移动网络下不加载新图片，只加载内存和本地缓存的图片，达到省流量的目的
可以在github上公布下阶段的开发计划
修复首页竖的图默认图貌似裁剪的问题，是偏的
增加一个扫描本地apk，展示从apk加载图标的功能
可以直接显示已安装app的图标，可能要新增加一种类型，例如apk://
考虑一下怎么能让使用者更加方便的自定义新的加载方式，就比如我要显示apk的图标，却因为现有框架的限制导致必须开发者来支持才可以
用纯色定义的图片作为默认图的时候会发生什么情况呢？
有问题很严重的问题，在列表的时候尚未加载完成，点击调到详情页就一直在等待，明明之前已经加载完成了
只在display方法里创建默认图bitmap并将至放到内存缓存中
将drawableholder也搞成接口
计算bitmap内存占用的也换成接口
lrucache换成string，drawable这样就能放各种drawable了
更改进度的实现方式，由downloadrequest新增一个updateprogress的方法，读取数据的时候直接回调这个方法，在这个方法里面再次回调监听器，这样一来可以去掉多余的loadprogresslistener和displayprogresslistener，只用一个progresslistener即可搞定
当请求取消的时候那些滞留在内存中的bitmap该怎么办，目前load过程中的都已在取消时回收
还要更加精细化request的运行状态，比如在取消时检查当前的状态，如果合适的话就回收bitmap
spearImageView的涟漪效果还不够好，应该是快速点击的时候也要快速扩散，长按的时候慢慢扩散
默认不显示加载进度，在设置中增加开关选项
增加一个接口，将spearimageview的特别功能抽离出来，方便别人自定义，最重要的是在display之前加一个初始化的方法，方便初始化一些在getview中频繁设置的属性
为了解决recycleview不遵守约定在attwindow之前执行getview方法，就在ondewindow的时候设置个标记意思是尚未调用display方法，然后在display方法里将这个标记设为一设置，然后在onattwindow里检查这个标记如果尚未设置就企图使用旧的请求加载，这样貌似就可以在onattwindow的时候设置drawable为null了
现在需要在ondetowindow的时候主动取消加载，在notifydrawable方法中加入对Binddrawable的处理，在Bingdrawable中取消请求，这样就不必考弱引用来维护关系了
包名改为me.xiaopan.spear
支持OKhttp
还要将waitdisplayrefcount改为int，因为执行加载前要从内存中判断下是否已经有了，有了的话就要设置等待显示，这时候如果多个共用的话就得用int计数了
display请求执行加载之前先去判断内存中是否已经存在了符合要求的图片，有的话取出来计数加一
peocessor支持设置bitmap.config
dIakcache默认设为100m
对loading drawable处理的时候加上判断尺寸比例是否一样，一样的话就不处理了
解码apk时，先将apk图片存到本地缓存区然后从本地读